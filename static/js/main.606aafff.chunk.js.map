{"version":3,"sources":["components/Lifebar.js","components/Scorebar.js","components/Scoreboard.js","components/Sky.js","components/StartMenu.js","components/TRex.js","components/Game.js","components/App.js","index.js"],"names":["Lifebar","props","lifes","i","push","className","key","Scorebar","score","Scoreboard","Cloud","style","top","Math","floor","random","Component","Sky","onCloudReachedEnd","console","log","setState","clouds","state","splice","spawnClouds","n","t","spawnCloudsTimerId","setTimeout","spawnOneCloud","concat","this","clearTimeout","map","cloud","StartMenu","TRex","handleEscaped","e","animationName","includes","onEscaped","handleHit","delay","ms","x","Promise","resolve","onHit","sprite","WebkitAnimationPlayState","then","motion","restart","onAnimationEnd","onClick","Game","gameState","START_MENU","RUNNING","SCOREBOARD","handleClick","game","startGame","scene","trexHit","trexEscaped","_lifes","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.606aafff.chunk.js","sourcesContent":["import '../styles/Lifebar.css';\nimport React from 'react';\n\nfunction Lifebar(props) {\n    let lifes = [];\n    for(let i = 0; i < props.lifes; ++i) {\n        lifes.push(<div className=\"life\" key={i}></div>)\n    }\n\n    return ( <div className=\"lifebar\">{lifes}</div> );\n}\n \nexport default Lifebar;","import '../styles/Scorebar.css';\nimport React from 'react';\n\nfunction Scorebar(props) {\n        return (\n        <div className=\"scorebar\">\n            <span className=\"score\" key={props.score}>\n                {props.score}\n            </span>\n        </div>);\n}\n\nexport default Scorebar;","import '../styles/Scoreboard.css';\nimport React from 'react';\n\nfunction Scoreboard(props) {\n    return (\n    <div className=\"scoreboard\">\n        (placeholder)\n        <br/>\n        Game Over!\n        Your final score:\n        <br/>\n        {props.score}\n        <br/>\n        Click to restart\n    </div> );\n}\n \nexport default Scoreboard;","import '../styles/Sky.css'\nimport React, { Component } from 'react'\n\nclass Cloud extends Component {\n    render() {\n        return <div className=\"cloud\" style={{top: Math.floor(Math.random() * 40)}}></div>\n    }\n}\n\nclass Sky extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clouds: [],\n            // pool of cloud's keys. cloud components should be reused\n            // instead of continously spawning new clouds.\n            spawnCloudsTimerId: 0,\n        };\n    }\n\n    componentDidMount() {\n        // immediately spawn a cloud...\n        this.spawnOneCloud(4);\n        // ...then spawn some more.\n        this.spawnClouds(3);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.state.spawnCloudsTimerId);\n    }\n\n    onCloudReachedEnd = () => {\n        console.log('dua')\n        this.setState({\n            // remove the first cloud in the array, which is the cloud\n            // that reached the end of he scene. this would not work\n            // if clouds had different velocities.\n            clouds: this.state.clouds.splice(0, 1),\n        })\n    }\n\n    // spawn n clouds in random time offsets, at random height\n    spawnClouds = (n) => {\n        if (0 === n) return;\n        let t = 10000 * Math.random() + 5000;\n        let spawnCloudsTimerId = setTimeout(() => {\n            this.spawnOneCloud(n);\n            this.spawnClouds(--n);\n        }, t);\n\n        this.setState( {\n            spawnCloudsTimerId: spawnCloudsTimerId,\n        })\n    \n    }\n\n    spawnOneCloud = (key) => {\n            this.setState({\n            clouds: this.state.clouds.concat(<Cloud key={key}/>),\n        })\n    }\n\n    render() { \n        return (\n            <div className=\"sky \">\n                {this.state.clouds.map((cloud) => cloud)}\n            </div>\n         );\n    }\n}\n \nexport default Sky;","import '../styles/StartMenu.css'\nimport React from 'react'\n\nfunction StartMenu(props) {\n    return (<div className=\"startmenu\">\n        HAI THIS IS THE START MENU PLACEHOLDER\n        <br/>\n        Click anywhere to begin <b>the hunt</b>.\n    </div>);\n}\n\nexport default StartMenu;","import '../styles/TRex.css'\nimport React, { Component } from 'react'\n\nclass TRex extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            motion: \"trex-run\",\n            sprite: \"trex-toddle\",\n         }\n    }\n\n    handleEscaped = (e) => {\n        if (e.animationName.includes(\"run\")) {\n            this.props.onEscaped();\n        }\n    }\n\n    handleHit = () => {\n        this.props.onHit();\n        // a trick to introduce a delay between subsequent .then calls\n        function delay(ms) {\n            return function(x) {\n                return new Promise(resolve => setTimeout(() => resolve(x), ms));\n            };\n        }\n\n        new Promise(resolve => {\n            this.setState({\n                sprite: 'trex-shock',\n                // stops `motion`'s animation\n                style: {\n                    WebkitAnimationPlayState : 'paused',\n                },\n            })\n            resolve();\n        })\n        .then( delay(700) )\n        .then( () => {\n            this.setState({ \n                motion: '',\n                sprite: '',\n            });\n        })\n        .then( delay(Math.random() * 2000) )\n        .then( () => {\n            this.restart()\n        });\n    }\n\n    restart = () => {\n        this.setState({\n            motion: \"trex-run\",\n            sprite: \"trex-toddle\",\n            style: {}\n        });\n    }\n\n    render() { \n        return (\n        <div className={this.state.motion}\n             style={this.state.style}\n             onAnimationEnd={this.handleEscaped}\n             onClick={this.handleHit}>\n                 <div className={this.state.sprite}>\n                 </div>\n        </div> );\n    }\n}\n \nexport default TRex;","import '../styles/Game.css';\nimport React, { Component } from 'react';\nimport Lifebar from './Lifebar'\nimport Scorebar from './Scorebar';\nimport Scoreboard from './Scoreboard';\nimport Sky from './Sky';\nimport StartMenu from './StartMenu';\nimport TRex from './TRex.js';\n\n\nclass Game extends Component {\n    gameState = {\n        START_MENU: 0,\n        RUNNING: 1,\n        SCOREBOARD: 2,\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            game: this.gameState.START_MENU,\n            lifes: 3,   \n            scene: <StartMenu />,\n            score: 0\n        }\n    }\n\n    handleClick = () => {\n        switch(this.state.game) {\n            case this.gameState.START_MENU:\n            case this.gameState.SCOREBOARD:\n                // start or restart the game\n                this.startGame();\n                break;\n            case this.gameState.RUNNING:\n            default:\n                // do nothing\n                break;\n        }\n    }\n\n    startGame = () => {\n        this.setState({\n            game: this.gameState.RUNNING,\n            lifes: 3,\n            score: 0,\n            scene: \n            (<>\n                <Scorebar score={this.state.score}/>\n                <Lifebar lifes={this.state.lifes}/>\n                <TRex onHit={this.trexHit} onEscaped={this.trexEscaped}/>\n            </>),\n        })\n    }\n\n    trexHit = () => {\n        let scoreIncrement = 1000;\n        this.setState({\n            score: this.state.score + scoreIncrement,\n            // since passing state to children through props does not guarantee re-render,\n            // we have to re-render all the components.\n            scene: (\n            <>\n                <Scorebar score={this.state.score + scoreIncrement}/>\n                <Lifebar lifes={this.state.lifes}/>\n                <TRex onHit={this.trexHit} onEscaped={this.trexEscaped}/>\n            </>),\n        });\n    }\n\n    trexEscaped = () => {\n        // game over!\n        // reset life count and score.\n        if (0 === this.state.lifes) {\n            this.setState({\n                game: this.gameState.SCOREBOARD,\n                scene: <Scoreboard score={this.state.score} />,\n                lifes: 3,\n                score: 0,\n            })\n        } else {\n            let _lifes = this.state.lifes - 1;\n            this.setState({\n                lifes: _lifes,\n                // since passing state to children through props does not guarantee re-render,\n                // we have to re-render all the components.\n                scene: (\n                    <>\n                        <Scorebar score={this.state.score}/>\n                        <Lifebar lifes={this.state.lifes - 1}/>\n                        <TRex onHit={this.trexHit} onEscaped={this.trexEscaped} key={_lifes}/>\n                    </>),\n                });\n        };\n\n    }\n\n    render() {\n        return (\n            <div className=\"scene\" onClick={this.handleClick}>\n                <Sky />\n                {this.state.scene}\n                <div className=\"floor\"/>\n            </div>\n        );\n    }\n}\nexport default Game;","import React from 'react';\nimport '../styles/App.css';\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}